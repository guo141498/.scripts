#!/usr/bin/env ruby
# encoding: utf-8

require 'escort'
require 'rainbow/ext/string'

def getdensity(val)
  rho, r, gam = val[:rho_s], val[:r_s], val[:gamma]
  rho * (RSUN / r)**-gam / (1 + (RSUN / r))**(3 - gam)
end

def getrho_s(val)
  den, r, gam = val[:density], val[:r_s], val[:gamma]
  den * (RSUN / r)**gam * (1 + (RSUN / r))**(3 - gam)
end

MINSTEP = 1e-5
def getx(gamma, v, min, max) # solve x^gamma + x^3 = V for x in [min, max] with dichotomy
  return max if max - min <= MINSTEP
  mid = (min + max) / 2
  return getx(gamma, v, min, mid) if (1 + mid)**(3 - gamma) * mid**gamma > v
  return getx(gamma, v, mid, max)
end

def getr_s(val)
  den, rho, gam = val[:density], val[:rho_s], val[:gamma]
  return('The rho_s should be in the range [0,3]') if gam < 0 || gam > 3
  RSUN / getx(gam, rho / den, 0, (rho / den)**(1 / gam))
end

def getgamma(val)
  den, rho, x = val[:density], val[:rho_s], RSUN / val[:r_s]
  Math.log(den / rho * (1 + x)**3) / Math.log(1 + 1 / x)
end

RSUN = 8.5

class Profile < ::Escort::ActionCommand::Base
  def execute
    opts = command_options
    fullpara = %w(density rho_s r_s gamma).map { |x| x.to_sym }
    para = fullpara.select { |x| opts[x] == 0 }
    sizeright, ch =  para.size == 1, para[0]
    raise ArgumentError, 'Please define 3 of the 4 parameters' unless sizeright

    opts[ch] = send("get#{ch}", command_options)

    getline = ->(pa) { "#{format("%-10.10s", pa)}: #{opts[pa]}" }
    frm = ->(str, emp) { emp ? str.bright : str }
    puts fullpara.map { |x| frm.call(getline.call(x), x == ch) }.join("\n")
  end
end

Escort::App.create do |app|
  app.summary 'This command is to calculate the NFW profile'

  app.description <<-eof
    NFW profile: rho(r) = rho_s * (r / r_s)^-gamma / (1 + (r / r_s))^{3 - gamma}
  eof

  app.options do |opts|
    opts.opt :density, 'local density of DM',
      short: '-d', long: '--density', type: :float, default: 0.0
    opts.opt :rho_s, 'the normalize factor in NFW profile',
      short: '-r', long: '--rho', type: :float, default: 0.0
    opts.opt :r_s, 'the halo size',
      short: '-s', long: '--rs', type: :float, default: 0.0
    opts.opt :gamma, 'the index',
      short: '-g', long: '--gamma', type: :float, default: 0.0
  end

  app.action do |options, arguments|
    Profile.new(options, arguments).execute
  end
end
