#!/usr/bin/env ruby
# encoding: utf-8

require 'fileutils'
require 'rainbow/ext/string'

# This script is used to mount the known disk (including usb disk) easily

# A class to ask the label of disk
class DiskLabel
  LABEL_PATH = '/dev/disk/by-label/'

  def initialize
    deallab = ->(l) { [linkpt(l).to_sym, formchar(l)] if File.symlink?(l) }
    @label = Hash[Dir["#{LABEL_PATH}/*"].map { |x| deallab.call(x) }.compact]
  end

  def lab(disk)
    @label[disk.to_sym]
  end

  private

  def formchar(file)
    unescape(file.gsub(%r{^.+/([^/]+)$}, '\1')).encode('utf-8', 'gbk')
  end

  def unescape(src)
    String.class_eval(%("#{src}"))
  end

  def parent(file)
    file.gsub(%r{(^.+)/[^/]+$}, '\1')
  end

  def linkpt(lnfile)
    File.expand_path("#{parent(lnfile)}/#{File.readlink(lnfile)}")
  end
end

# A class to show the mount points of each disk
class DiskMP
  def initialize
    @mount_point = Hash[`df`.each_line.to_a[1..-1].map { |l| deallinedf(l) }]
  end

  def deallinedf(line)
    term = line.split(' ')
    [term[0].to_sym, term[-1]]
  end

  def path(disk)
    @mount_point[disk.to_sym]
  end
end

# Initialize all the information of disks
class DiskInfo
  def initialize(str)
    @str = str
    @mp = DiskMP.new
    @label = DiskLabel.new

    @disk = @str.split("\nDisk ").map { |x| readinfo(x) }.compact.to_h
  end

  def get(dev, hash = @disk)
    return unless hash
    hash[dev] || hash.each_value.map { |v| info(dev, v[:subdisks]) }.compact[0]
  end

  def list
    listrec.map { |item| item.is_a?(Array) ? item : [item] }
  end

  private

  def listrec(hash = @disk)
    hash.map { |k, v| v[:subdisks] ? listrec(v[:subdisks]) : listinfo(k, v) }
  end

  LISTVAL = %w(label path system size).map(&:to_sym)
  def listinfo(dev, v)
    LISTVAL.map { |k| [k, v[k]] }.to_h.merge(device: dev)
  end

  SYSTYPE = { 'dos' =>  'HPFS/NTFS/exFAT' }
  def readinfo(diskinfo)
    diskinfo = diskinfo.split("\n")
    return unless %r{(?<diskname>/dev/[\w/-]+)[^\d]+
                     (?<sizeh>[\d.]+) \w+[^\d]+
                     (?<size>\d+)[^\d]+
                     (?<blocknum>\d+)}x =~ diskinfo[0]

    /= (?<blocksize>\d+)[^\d]+$/ =~ diskinfo[1]
    info = [diskname, { size: byte_to_g(size), blocknum: blocknum,
                        blocksize: blocksize, path: @mp.path(diskname),
                        label: @label.lab(diskname) }]

    return info unless diskinfo[4]

    /^Disklabel type: (?<system>.+)$/ =~ diskinfo[4]
    info[1][:system] = SYSTYPE[system]

    info[1][:subdisks] = diskinfo[4..-1].map { |l| readsubdisk(l) }.compact.to_h
    info[1][:subdisks] = nil if info[1][:subdisks].empty?
    info
  end

  def byte_to_g(x)
    x.to_f / 1024**3
  end

  def k_to_g(x)
    x.to_f / 1024**2
  end

  def readsubdisk(l)
    return unless %r{(?<diskname>/dev/[\w/-]+)\s+
                     (?<boot>\*)?\s+
                     (?<start>\d+)\s+
                     (?<ends>\d+)\s+
                     (?<size>\d+)\+?\s+
                     (?<id>\w+)\s+
                     (?<system>.+)}x =~ l

    [diskname,
     { boot: boot, start: start, end: ends, blocknum: ends.to_i - start.to_i,
       size: k_to_g(size), id: id, system: system, path: @mp.path(diskname),
       label: @label.lab(diskname) }]
  end
end

# Mounting the disk
class DiskMounter
  def initialize(info, ignore)
    @info = info
    @ignore = ignore
  end

  STYLE = { question: [:yellow, false],
            hint: [:yellow, true],
            label: [:default, true],
            size: [:white, true],
            path: [:cyan, true],
            system: [:magenta, false],
            cmd: [:cyan, false]
  }

  ASK_WITCH = 'Which disk do you want to mount (umount)?'
  HINT = 'Please choose an index.'
  QUIT_HINT = 'Stop mounting (unmounting)...'
  def ask
    @index = 0
    @list = deallist(@info.list) { |item| add_index(item) }

    plist = deallist(@list) { |item| showitem(item) }

    @list.flatten!
    inds = @list.map { |x| x[:index] }

    stat = loopask(plist, inds)
    return unless stat == :quit

    puts mark(QUIT_HINT, :hint)
    exit 1
  end

  def mount
    return unless @current
    disk = @list.find { |x| x[:index] == @current }
    disk[:path] ? umount_act(disk[:path]) : mount_act(disk)
  end

  private

  def loopask(plist, inds)
    loop do
      showlist(plist)

      ch = $stdin.gets.chomp
      break :quit if %w(q quit Q Quit).include?(ch)

      ind = ch
      break @current = ind if inds.include?(ind)

      puts mark(HINT, :hint)
    end
  end

  def showlist(plist)
    puts [mark(ASK_WITCH, :question), plist.map(&:join).join("\n")].join("\n")
  end

  def showitem(item)
    ["\t",
     mark("#{item[:index]}. #{item[:label] || item[:device]}", :label), "\t",
     mark(format('%.1f G', item[:size]), :size), "\t",
     mark(item[:path], :path), ' ',
     mark(item[:system], :system), "\n"].join
  end

  def mark(str, type = nil)
    str = str.to_s.color(STYLE[type][0]) if STYLE[type]
    str = str.bright if STYLE[type] && STYLE[type][1]
    str
  end

  def deallist(list)
    list.map { |items| items.map { |x| yield(x) }.compact }.reject(&:empty?)
  end

  def add_index(item)
    return if ignore(item)
    item.merge(index: (@index += 1).to_s)
  end

  M_DIR = '~/mnt'
  USER = `echo $USER`.chomp
  M_OPTION = { iocharset: 'utf8', uid: USER, gid: USER, fmask: '133', \
               dmask: '022' }
  def mount_act(disk)
    opts = M_OPTION.each.map { |o, v| "#{o}=#{v}" }.join(',')
    command = "sudo mount -o #{opts} #{disk[:device]} #{path = getpath(disk)}"

    FileUtils.mkdir(path) unless File.exist?(path)

    puts mark(command, :cmd)
    system(command)
  end

  UNMOUNT_FAIL_ERR = 'Error: Unmount failed'.color(:red).bright
  def umount_act(path)
    command = "sudo umount #{path}"

    puts mark(command, :cmd)
    system(command)
    return(puts(UNMOUNT_FAIL_ERR)) if Dir["#{path}/{*,.*}"].size > 2
    system("rm -rf #{path}")
  end

  def getpath(disk)
    label = disk[:label] || disk[:device].sub(%r{.+/([^/]+)?}, '\1')
    File.expand_path("#{M_DIR}/#{label}")
  end

  def ignore(item)
    @ignore.map { |k, v| v.map { |x| x === item[k] } }.flatten
      .reduce(false) { |a, e| a || e }
  end
end

IGNORE = { system: ['Linux LVM', "W95 Ext'd (LBA)"], path: ['/home', '/boot'],
           device: [%r{/dev/mapper/.+}] }

info = DiskInfo.new(`sudo fdisk -l`)
mounter = DiskMounter.new(info, IGNORE)
mounter.ask
mounter.mount
